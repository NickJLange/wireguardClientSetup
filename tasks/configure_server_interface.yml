---
- name: "Configure Interface (default to {{ wireguard_interface }})"
  block:
    - set_fact:
        vault_key: "{{ wireguard_client_server_endpoint.split(':')[0]}}"
    - name: Fetch Wireguard Client Pub Keys
      hashivault_read:
        secret: "{{ vault_key }}"
        mount_point: 'kv/wireguard-server'
        version: 2
      register: wgrawsecret
      delegate_to: localhost
      become: false
      become_user: "{{ local_ssh_user }}"

    - name: Cleanup data
      set_fact:
        wireguard_server_clients: "{{wgrawsecret.value}}"
        wireguard_server_private_key: "{{wgrawsecret.value.PrivateKey}}"
        wireguard_ip_map: {"10.253.10.150/32":"192.168.3.0/24","10.253.10.151/32":"192.168.3.101/32","10.253.10.152/32":"192.168.3.102/32","10.253.10.100/32":"192.168.20.0/24"}

    - debug: msg="Known secrets are {{ wgrawsecret.value }}"
    - debug: msg="PrivateKey {{ wireguard_server_private_key }}"
    - debug: msg="Known secrets are {{ wireguard_server_clients }}"


    ### FIXME: Needs cleanup
    - name: Generate WireGuard configuration file
      template:
        src: wg-server.conf.j2
        dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
        owner: root
        group: root
        mode: 0600
      notify:
        - reconfigure wireguard

    - name: Check if reload-module-on-update is set
      stat:
        path: "{{ wireguard_remote_directory }}/.reload-module-on-update"
      register: reload_module_on_update
      tags:
        - wg-config

    - name: Set WireGuard reload-module-on-update
      file:
        dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
        state: touch
      when: not reload_module_on_update.stat.exists
      tags:
        - wg-config

    - name: Start and enable WireGuard service
      service:
        name: "wg-quick@{{ wireguard_interface }}"
        state: started
#        enabled: yes

  tags: wireguard_configure_server
